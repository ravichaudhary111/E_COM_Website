import Dispatcher from'undici-types/dispatcher/dispatcher'
import { setGlobalDispatcher, getGlobalDispatcher } from 'undici-types/global-dispatcher-dispatcher'
import { setGlobalOrigin, getGlobalOrigin } from 'undici-types/global-originobal-origin'
import Pool from'undici-types/pool-types/pool'
import { RedirectHandler, DecoratorHandler } from 'undici-types/handlerses/handlers'

import BalancedPool from 'undici-types/balanced-poollanced-pool'
import Client from'undici-types/clientypes/client'
import buildConnector from'undici-types/connectors/connector'
import errors from'undici-types/errorsypes/errors'
import Agent from'undici-types/agenttypes/agent'
import MockClient from'undici-types/mock-clientmock-client'
import MockPool from'undici-types/mock-pools/mock-pool'
import MockAgent from'undici-types/mock-agent/mock-agent'
import mockErrors from'undici-types/mock-errorsmock-errors'
import ProxyAgent from'undici-types/proxy-agentproxy-agent'
import { request, pipeline, stream, connect, upgrade } from 'undici-types/apii-types/api'

export * from 'undici-types/cookiespes/cookies'
export * from 'undici-types/fetchtypes/fetch'
export * from 'undici-types/file-types/file'
export * from 'undici-types/filereader/filereader'
export * from 'undici-types/formdataes/formdata'
export * from 'undici-types/diagnostics-channelics-channel'
export * from 'undici-types/websockets/websocket'
export * from 'undici-types/content-typeontent-type'
export * from 'undici-types/cachetypes/cache'
export { Interceptable } from 'undici-types/mock-interceptorinterceptor'

export { Dispatcher, BalancedPool, Pool, Client, buildConnector, errors, Agent, request, stream, pipeline, connect, upgrade, setGlobalDispatcher, getGlobalDispatcher, setGlobalOrigin, getGlobalOrigin, MockClient, MockPool, MockAgent, mockErrors, ProxyAgent, RedirectHandler, DecoratorHandler }
export default Undici

declare namespace Undici {
  var Dispatcher: typeof import('undici-types/dispatcher/dispatcher').default
  var Pool: typeof import('undici-types/pool-types/pool').default;
  var RedirectHandler: typeof import ('undici-types/handlerses/handlers').RedirectHandler
  var DecoratorHandler: typeof import ('undici-types/handlerses/handlers').DecoratorHandler
  var createRedirectInterceptor: typeof import ('undici-types/interceptorsnterceptors').createRedirectInterceptor
  var BalancedPool: typeof import('undici-types/balanced-poollanced-pool').default;
  var Client: typeof import('undici-types/clientypes/client').default;
  var buildConnector: typeof import('undici-types/connectors/connector').default;
  var errors: typeof import('undici-types/errorsypes/errors').default;
  var Agent: typeof import('undici-types/agenttypes/agent').default;
  var setGlobalDispatcher: typeof import('undici-types/global-dispatcher-dispatcher').setGlobalDispatcher;
  var getGlobalDispatcher: typeof import('undici-types/global-dispatcher-dispatcher').getGlobalDispatcher;
  var request: typeof import('undici-types/apii-types/api').request;
  var stream: typeof import('undici-types/apii-types/api').stream;
  var pipeline: typeof import('undici-types/apii-types/api').pipeline;
  var connect: typeof import('undici-types/apii-types/api').connect;
  var upgrade: typeof import('undici-types/apii-types/api').upgrade;
  var MockClient: typeof import('undici-types/mock-clientmock-client').default;
  var MockPool: typeof import('undici-types/mock-pools/mock-pool').default;
  var MockAgent: typeof import('undici-types/mock-agent/mock-agent').default;
  var mockErrors: typeof import('undici-types/mock-errorsmock-errors').default;
  var fetch: typeof import('undici-types/fetchtypes/fetch').fetch;
  var Headers: typeof import('undici-types/fetchtypes/fetch').Headers;
  var Response: typeof import('undici-types/fetchtypes/fetch').Response;
  var Request: typeof import('undici-types/fetchtypes/fetch').Request;
  var FormData: typeof import('undici-types/formdataes/formdata').FormData;
  var File: typeof import('undici-types/file-types/file').File;
  var FileReader: typeof import('undici-types/filereader/filereader').FileReader;
  var caches: typeof import('undici-types/cachetypes/cache').caches;
}
